# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

    if Vagrant.has_plugin?("vagrant-vbguest")
        config.vbguest.auto_update = false
    end

    config.vm.box = "ubuntu/focal64"
    config.ssh.insert_key = false
    config.ssh.verify_host_key = false
  
    $msg = <<-'MSG'
    --------------------------------------------------------
    `vagrant ssh controller` to connect to the controller.
    Once connected:
    `source py3/bin/activate` to activate venv
    `cd /vagrant` to change to the Vagrant project folder.
    
    From here ansible will have access to playbooks within
    the project.
    --------------------------------------------------------
    MSG
    # config.vm.post_up_message = $msg
  
    config.vm.define "controller", primary: true do |controller|
      controller.vm.network "private_network", ip: "192.168.56.10"
      controller.vm.hostname = "controller"
      controller.vm.boot_timeout = 600
      # 'mount_options' used due to 'ansible.cfg' being in world-writable directory:
      # https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir
      controller.vm.synced_folder ".", "/vagrant", mount_options: ["dmode=775"]
      controller.vm.post_up_message = $msg
  
      controller.vm.provider "virtualbox" do |vb|
        vb.name ="controller"
        vb.memory = "2048"
        vb.cpus = "2"
      end
  
      controller.vm.provision "shell" do |provision|
        provision.path = "provision_controller.sh"
      end

      $script = <<-SCRIPT
      pip3 install --upgrade pip
      pip3 install wheel
      pip3 install requests==2.31.0
      SCRIPT

      controller.vm.provision "shell", inline: $script, privileged: false
  
      # Generate a key pair if one does not exist, and copy public key to shared directory on host machine.
      # Nodes will pull this key for authentication.
      # From: https://github.com/jminck/vagrant-ansible-lab/blob/master/Vagrantfile
      controller.vm.provision :shell, :inline => <<'EOF'
if [ ! -f "/home/vagrant/.ssh/id_rsa" ]; then
  ssh-keygen -t rsa -N "" -f /home/vagrant/.ssh/id_rsa
fi
cp /home/vagrant/.ssh/id_rsa.pub /vagrant/.vagrant/control.pub
  
chown -R vagrant:vagrant /home/vagrant/.ssh
EOF
    end

    config.vm.define "mysql" do |mysql|
      #mysql.vm.synced_folder '.', '/vagrant', disabled: true
      mysql.vm.network "private_network", ip: "192.168.56.11"
      mysql.vm.hostname = "mysql"
      mysql.vm.provider "virtualbox" do |vb|
        vb.name = "mysql"
        vb.memory = "1024"
        vb.cpus = "1"
      end

      # Copy the key from the host machine
      mysql.vm.provision :shell, inline: 'cat /vagrant/.vagrant/control.pub >> /home/vagrant/.ssh/authorized_keys'
    end

    config.vm.define "ghost" do |ghost|
      #ghost.vm.synced_folder '.', '/vagrant', disabled: true
      ghost.vm.network "private_network", ip: "192.168.56.12"
      ghost.vm.hostname = "ghost"
      ghost.vm.provider "virtualbox" do |vb|
        vb.name = "ghost"
        vb.memory = "1024"
        vb.cpus = "1"
      end
  
      # Copy the key from the host machine
      ghost.vm.provision :shell, inline: 'cat /vagrant/.vagrant/control.pub >> /home/vagrant/.ssh/authorized_keys'
    end
  
  end
  